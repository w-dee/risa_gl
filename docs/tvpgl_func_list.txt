tjs_int TVPTLG5DecompressSlide_c(tjs_uint8 *out, const tjs_uint8 *in, tjs_int insize, tjs_uint8 *text, tjs_int initialr);
void TVPAddBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c = sat(src + dest);
* a = dest;

void TVPAddBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c = sat(src*opa + dest);
* a = dest;

void TVPAddBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c = sat(src + dest);
* a = undefined;

void TVPAddBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c = sat(src*opa + dest);
* a = undefined;

void TVPAddSubVertSum16_c(tjs_uint16 *dest, const tjs_uint32 *addline, const tjs_uint32 *subline, tjs_int len);
void TVPAddSubVertSum16_d_c(tjs_uint16 *dest, const tjs_uint32 *addline, const tjs_uint32 *subline, tjs_int len);
void TVPAddSubVertSum32_c(tjs_uint32 *dest, const tjs_uint32 *addline, const tjs_uint32 *subline, tjs_int len);
void TVPAddSubVertSum32_d_c(tjs_uint32 *dest, const tjs_uint32 *addline, const tjs_uint32 *subline, tjs_int len);

void TVPAdditiveAlphaBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c,a = TVPAddAlphaBlend_HDA_n_a();

void TVPAdditiveAlphaBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c,a = TVPAddAlphaBlend_n_a_o();

void TVPAdditiveAlphaBlend_a_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c,a = TVPAddAlphaBlend_a_a();

void TVPAdditiveAlphaBlend_ao_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c,a = TVPAddAlphaBlend_a_a_o();

void TVPAdditiveAlphaBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c,a = TVPAddAlphaBlend_n_a();

void TVPAdditiveAlphaBlend_d_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* not implemented yet.

void TVPAdditiveAlphaBlend_do_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* not implemented yet.

void TVPAdditiveAlphaBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c,a = TVPAddAlphaBlend_n_a_o();

void TVPAdjustGamma_a_c(tjs_uint32 *dest, tjs_int len, tTVPGLGammaAdjustTempData *temp);
* テーブルによるガンマ補正?
void TVPAdjustGamma_c(tjs_uint32 *dest, tjs_int len, tTVPGLGammaAdjustTempData *temp);
* 

void TVPAlphaBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c = (s - d) * s.a + d;
* a = d.a;

void TVPAlphaBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c = (s - d) * s.a * opa + d;
* a = undefined;

void TVPAlphaBlend_a_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c,a = TVPAddAlphaBlend_a_d();

void TVPAlphaBlend_ao_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c,a = TVPAddAlphaBlend_a_d_o();

void TVPAlphaBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c,a = TVPAddAlphaBlend_n_a();

void TVPAlphaBlend_d_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
* c = (s - d) * (s.a /((1 - d.a)* s.a + d.a)) + d;
* a = s.a + d.a - s.a * d.a

void TVPAlphaBlend_do_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c = (s - d) * (s.a * opa /((1 - d.a)* s.a * opa + d.a)) + d;
* a = s.a * opa + d.a - s.a * d.a * opa
 
void TVPAlphaBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
* c = (s - d) * s.a * opa + d;
* a = undefined;

void TVPAlphaColorMat_c(tjs_uint32 *dest, const tjs_uint32 color, tjs_int len);
* c = (s - d) * s.a + d;
* a = 1;

void TVPApplyColorMap65_HDA_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
* c = (c - d) * s.a + d; // c = constant color.
* a = undefined;

void TVPApplyColorMap65_HDA_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
* c = (c - d) * s.a * opa + d;
* a = undefined;

void TVPApplyColorMap65_a_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
* c,a = TVPAddAlphaBlend_a_ca(d, s.a, 1 - (c * s.a), c * s.a);

void TVPApplyColorMap65_ao_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
* c,a = TVPAddAlphaBlend_a_ca(d, s.a * opa, 1 - s.a * opa, c * s.a * opa);

void TVPApplyColorMap65_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
* c = (c - d) * s.a + d;
* a = undefined;

void TVPApplyColorMap65_d_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);

void TVPApplyColorMap65_do_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPApplyColorMap65_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPApplyColorMap_HDA_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
void TVPApplyColorMap_HDA_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPApplyColorMap_a_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
void TVPApplyColorMap_ao_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPApplyColorMap_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
void TVPApplyColorMap_d_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color);
void TVPApplyColorMap_do_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPApplyColorMap_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPBLConvert15BitTo32Bit_c(tjs_uint32 *dest, const tjs_uint16 *buf, tjs_int len);
void TVPBLConvert15BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint16 *buf, tjs_int len);
void TVPBLConvert24BitTo32Bit_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPBLConvert24BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPBLConvert32BitTo32Bit_AddAlpha_c(tjs_uint32 *dest, const tjs_uint32 *buf, tjs_int len);
void TVPBLConvert32BitTo32Bit_MulAddAlpha_c(tjs_uint32 *dest, const tjs_uint32 *buf, tjs_int len);
void TVPBLConvert32BitTo32Bit_NoneAlpha_c(tjs_uint32 *dest, const tjs_uint32 *buf, tjs_int len);
void TVPBLConvert32BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint32 *buf, tjs_int len);
void TVPBLExpand1BitTo32BitPal_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBLExpand1BitTo8BitPal_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBLExpand1BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPBLExpand4BitTo32BitPal_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBLExpand4BitTo8BitPal_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBLExpand4BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPBLExpand8BitTo32BitPal_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBLExpand8BitTo8BitPal_c(tjs_uint8 *dest, const tjs_uint8 *buf, tjs_int len, const tjs_uint32 *pal);
void TVPBindMaskToMain_c(tjs_uint32 *main, const tjs_uint8 *mask, tjs_int len);
void TVPChBlurAddMulCopy65_c(tjs_uint8 *dest, const tjs_uint8 *src, tjs_int len, tjs_int level);
void TVPChBlurCopy65_c(tjs_uint8 *dest, tjs_int destpitch, tjs_int destwidth, tjs_int destheight, const tjs_uint8 * src, tjs_int srcpitch, tjs_int srcwidth, tjs_int srcheight, tjs_int blurwidth, tjs_int blurlevel);
void TVPChBlurMulCopy65_c(tjs_uint8 *dest, const tjs_uint8 *src, tjs_int len, tjs_int level);
void TVPColorDodgeBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPColorDodgeBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPColorDodgeBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPColorDodgeBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_SD_a_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_SD_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_SD_d_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_a_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPConstAlphaBlend_d_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPConstColorAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPConstColorAlphaBlend_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPConstColorAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 color, tjs_int opa);
void TVPConvert24BitTo32Bit_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPConvertAdditiveAlphaToAlpha_c(tjs_uint32 *buf, tjs_int len);
void TVPConvertAlphaToAdditiveAlpha_c(tjs_uint32 *buf, tjs_int len);
void TVPCopyColor_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPCopyMask_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPCopyOpaqueImage_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPDarkenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPDarkenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPDarkenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPDarkenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPDither32BitTo16Bit555_c(tjs_uint16 *dest, const tjs_uint32 *src, tjs_int len, tjs_int xofs, tjs_int yofs);
void TVPDither32BitTo16Bit565_c(tjs_uint16 *dest, const tjs_uint32 *src, tjs_int len, tjs_int xofs, tjs_int yofs);
void TVPDither32BitTo8Bit_c(tjs_uint8 *dest, const tjs_uint32 *src, tjs_int len, tjs_int xofs, tjs_int yofs);
void TVPDoBoxBlurAvg16_c(tjs_uint32 *dest, tjs_uint16 *sum, const tjs_uint16 * add, const tjs_uint16 * sub, tjs_int n, tjs_int len);
void TVPDoBoxBlurAvg16_d_c(tjs_uint32 *dest, tjs_uint16 *sum, const tjs_uint16 * add, const tjs_uint16 * sub, tjs_int n, tjs_int len);
void TVPDoBoxBlurAvg32_c(tjs_uint32 *dest, tjs_uint32 *sum, const tjs_uint32 * add, const tjs_uint32 * sub, tjs_int n, tjs_int len);
void TVPDoBoxBlurAvg32_d_c(tjs_uint32 *dest, tjs_uint32 *sum, const tjs_uint32 * add, const tjs_uint32 * sub, tjs_int n, tjs_int len);
void TVPDoGrayScale_c(tjs_uint32 *dest, tjs_int len);
void TVPExpand8BitTo32BitGray_c(tjs_uint32 *dest, const tjs_uint8 *buf, tjs_int len);
void TVPFastLinearInterpH2B_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src);
void TVPFastLinearInterpH2F_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src);
void TVPFastLinearInterpV2_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src0, const tjs_uint32 *src1);
void TVPFillARGB_NC_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 value);
void TVPFillARGB_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 value);
void TVPFillColor_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 color);
void TVPFillMask_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 mask);
void TVPInitGammaAdjustTempData_c(tTVPGLGammaAdjustTempData *temp, const tTVPGLGammaAdjustData *data);
void TVPInitTVPGL();
void TVPInitUnivTransBlendTable_a_c(tjs_uint32 *table, tjs_int phase, tjs_int vague);
void TVPInitUnivTransBlendTable_c(tjs_uint32 *table, tjs_int phase, tjs_int vague);
void TVPInitUnivTransBlendTable_d_c(tjs_uint32 *table, tjs_int phase, tjs_int vague);
void TVPInterpLinTransAdditiveAlphaBlend_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPInterpLinTransAdditiveAlphaBlend_o_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPInterpLinTransConstAlphaBlend_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPInterpLinTransCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPInterpStretchAdditiveAlphaBlend_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int blend_y, tjs_int srcstart, tjs_int srcstep);
void TVPInterpStretchAdditiveAlphaBlend_o_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int blend_y, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPInterpStretchConstAlphaBlend_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int blend_y, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPInterpStretchCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src1, const tjs_uint32 *src2, tjs_int blend_y, tjs_int srcstart, tjs_int srcstep);
void TVPLightenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPLightenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPLightenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPLightenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPLinTransAdditiveAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAdditiveAlphaBlend_HDA_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAdditiveAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAdditiveAlphaBlend_ao_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAdditiveAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAdditiveAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAdditiveAlphaBlend_do_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAdditiveAlphaBlend_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAlphaBlend_HDA_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAlphaBlend_ao_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransAlphaBlend_do_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransAlphaBlend_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransColorCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransConstAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransConstAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransConstAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransConstAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch, tjs_int opa);
void TVPLinTransCopyOpaqueImage_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPLinTransCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int sx, tjs_int sy, tjs_int stepx, tjs_int stepy, tjs_int srcpitch);
void TVPMakeAlphaFromKey_c(tjs_uint32 *dest, tjs_int len, tjs_uint32 key);
void TVPMulBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPMulBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPMulBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPMulBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsAddBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsAddBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsAddBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsAddBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsAlphaBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsAlphaBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsAlphaBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsAlphaBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorBurnBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorBurnBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorBurnBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorBurnBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorDodge5Blend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorDodge5Blend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorDodge5Blend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorDodge5Blend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorDodgeBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorDodgeBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsColorDodgeBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsColorDodgeBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDarkenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDarkenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDarkenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDarkenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDiff5Blend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDiff5Blend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDiff5Blend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDiff5Blend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDiffBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDiffBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsDiffBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsDiffBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsExclusionBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsExclusionBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsExclusionBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsExclusionBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsHardLightBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsHardLightBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsHardLightBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsHardLightBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsLightenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsLightenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsLightenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsLightenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsMulBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsMulBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsMulBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsMulBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsOverlayBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsOverlayBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsOverlayBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsOverlayBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsScreenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsScreenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsScreenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsScreenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsSoftLightBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsSoftLightBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsSoftLightBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsSoftLightBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsSubBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsSubBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPPsSubBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPPsSubBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPRemoveAdditiveConstOpacity_c(tjs_uint32 *dest, tjs_int len, tjs_int strength);
void TVPRemoveAdditiveOpacity65_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len);
void TVPRemoveAdditiveOpacity65_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_int strength);
void TVPRemoveAdditiveOpacity_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len);
void TVPRemoveAdditiveOpacity_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_int strength);
void TVPRemoveConstOpacity_c(tjs_uint32 *dest, tjs_int len, tjs_int strength);
void TVPRemoveOpacity65_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len);
void TVPRemoveOpacity65_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_int strength);
void TVPRemoveOpacity_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len);
void TVPRemoveOpacity_o_c(tjs_uint32 *dest, const tjs_uint8 *src, tjs_int len, tjs_int strength);
void TVPReverse32_c(tjs_uint32 *pixels, tjs_int len);
void TVPReverse8_c(tjs_uint8 *pixels, tjs_int len);
void TVPScreenBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPScreenBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPScreenBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPScreenBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPStretchAdditiveAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAdditiveAlphaBlend_HDA_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAdditiveAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAdditiveAlphaBlend_ao_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAdditiveAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAdditiveAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAdditiveAlphaBlend_do_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAdditiveAlphaBlend_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAlphaBlend_HDA_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAlphaBlend_ao_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchAlphaBlend_do_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchAlphaBlend_o_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchColorCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchConstAlphaBlend_HDA_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchConstAlphaBlend_a_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchConstAlphaBlend_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchConstAlphaBlend_d_c(tjs_uint32 *dest, tjs_int len, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep, tjs_int opa);
void TVPStretchCopyOpaqueImage_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPStretchCopy_c(tjs_uint32 *dest, tjs_int destlen, const tjs_uint32 *src, tjs_int srcstart, tjs_int srcstep);
void TVPSubBlend_HDA_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPSubBlend_HDA_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPSubBlend_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len);
void TVPSubBlend_o_c(tjs_uint32 *dest, const tjs_uint32 *src, tjs_int len, tjs_int opa);
void TVPSwapLine32_c(tjs_uint32 *line1, tjs_uint32 *line2, tjs_int len);
void TVPSwapLine8_c(tjs_uint8 *line1, tjs_uint8 *line2, tjs_int len);
void TVPTLG5ComposeColors3To4_c(tjs_uint8 *outp, const tjs_uint8 *upper, tjs_uint8 * const * buf, tjs_int width);
void TVPTLG5ComposeColors4To4_c(tjs_uint8 *outp, const tjs_uint8 *upper, tjs_uint8 * const* buf, tjs_int width);
void TVPTLG6DecodeGolombValuesForFirst_c(tjs_int8 *pixelbuf, tjs_int pixel_count, tjs_uint8 *bit_pool);
void TVPTLG6DecodeGolombValues_c(tjs_int8 *pixelbuf, tjs_int pixel_count, tjs_uint8 *bit_pool);
void TVPTLG6DecodeLineGeneric_c(tjs_uint32 *prevline, tjs_uint32 *curline, tjs_int width, tjs_int start_block, tjs_int block_limit, tjs_uint8 *filtertypes, tjs_int skipblockbytes, tjs_uint32 *in, tjs_uint32 initialp, tjs_int oddskip, tjs_int dir);
void TVPTLG6DecodeLine_c(tjs_uint32 *prevline, tjs_uint32 *curline, tjs_int width, tjs_int block_count, tjs_uint8 *filtertypes, tjs_int skipblockbytes, tjs_uint32 *in, tjs_uint32 initialp, tjs_int oddskip, tjs_int dir);
void TVPUninitGammaAdjustTempData_c(tTVPGLGammaAdjustTempData *temp);
void TVPUninitTVPGL();
void TVPUnivTransBlend_a_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len);
void TVPUnivTransBlend_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len);
void TVPUnivTransBlend_d_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len);
void TVPUnivTransBlend_switch_a_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len, tjs_int src1lv, tjs_int src2lv);
void TVPUnivTransBlend_switch_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len, tjs_int src1lv, tjs_int src2lv);
void TVPUnivTransBlend_switch_d_c(tjs_uint32 *dest, const tjs_uint32 *src1, const tjs_uint32 *src2, const tjs_uint8 *rule, const tjs_uint32 *table, tjs_int len, tjs_int src1lv, tjs_int src2lv);
