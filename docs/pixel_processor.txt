.color = .r + .g + .b
.all = .r + .g + .b + .a
.a = opacity
.r = red
.g = green
.b = blue
.o = 8bpp pixel

* ユニバーサルトランジション
 * result = src.all * .o + dest.all * (256 - .o)
 * アルファ値考慮合成
 * 加算アルファ合成

* カラーマップ
 * result = src.o * dest.all
  * src.oを写像するパターンが６４階調と２５６階調
  * 不透明度によって最適化
  * result.a = src.a
  * result.a = non determine

* 不透明度コピー
 * result = dest.color + src.a

* 色コピー
 * result = src.color + dest.a

* アルファ合成
 * result = dest.color * (256 - src.a) + src.color * src.a

* 

* result = dest.color + src.a; 
* result = src.color + dest.a;
* reuslt = src.color + dest.o;
*


* tvpgl
 * TVPOpacityOnOpacityTable
  opacity * opacity 時？の事前計算テーブル
  src.a, dest.a
  c = (src.a / dest.a) / (1 - src.a + (src.a / dest.a))
  展開すると
　c = src.a / ( -dest.a * src.a + src.a + dest.a)
  c = src.a / (src.a * ( 1 - dest.a ) + dest.a)

								    src . a
(%o4) 			       ---------------------------------
				       (1 - dest . a) src . a + dest . a



 * TVPNegativeMulTable
  alpha * alpha時のアルファ値の事前計算テーブル
  中身はporter-duffのsource-over-destination ruleのもの。
　f(a,b) = a * a.a + b * (1 - a.a)
         = a*a.a + b - b*a.a ;(a=a.a, b=b.a)
		 = a.a * a.a + b.a - b.a * a.a

(%o29) 		    - dest . a src . a + src . a + dest . a

